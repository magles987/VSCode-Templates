{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	//████Bloques de comentarios y separadores████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
	"comment_class": {
		"prefix": "comment_class",
		"body": [
		  "/** @info <hr>  ",
		  " * *class* `$1` ",
		  " *",
		  " * **Descripcion:**  ",
		  " * $2",
		  " * ____",
		  " */"
		],
		"description": "Comentario de encabezado para clase sencilla, con opción descripcion simple"
	},
	"comment_class_T": {
		"prefix": "comment_class_T",
		"body": [
			"/** @info <hr>  ",
			" * *class* `$1` ",
			" *",
			" * **Descripción:**  ",
			" * $2",
			" * ",
			" * ____",
			" * *Types:*  ",
			" * `$3`  ",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado para clase sencilla con T (tipos genericos) , con opción descripcion simple"
	},
	"comment_abstract_class": {
		"prefix": "comment_abstract_class",
		"body": [
		  "/** @info <hr>  ",
		  " * *abstract class* `$1` ",
		  " *",
		  " * **Descripcion:**  ",
		  " * $2",
		  " * ____",
		  " */"
		],
		"description": "Comentario de encabezado para clase abstracta, con opción descripcion simple"
	},
	"comment_abstract_class_T": {
		"prefix": "comment_abstract_class_T",
		"body": [
			"/** @info <hr>  ",
			" * *abstract class* `$1` ",
			" *",
			" * **Descripción:**  ",
			" * $2",
			" * ",
			" * ____",
			" * *Types:*  ",
			" * `$3`  ",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado para clase abstracta con T (tipos genericos) , con opción descripcion simple"
	},	
	"comment_class_extends": {
		"prefix": "comment_class_extends",
		"body": [
			"/** @info <hr>  ",
			" * *class* `$1`",
			" * ",
			" * **Descripción:**  ",
			" * $2",
			" * ____",
			" * *extends:*  ",
			" * `$3`  ",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado para clase heredada , con opción descripcion simple"
	},
	"comment_class_extendsT": {
		"prefix": "comment_class_extendsT",
		"body": [
			"/** @info <hr>  ",
			" * *class* `$1`",
			" * ",
			" * **Descripción:**  ",
			" * $2",
			" * ____",
			" * *Types:*  ",
			" * `$3`",
			" * ",
			" * *extends:*  ",
			" * `$4`  ",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado para clase heredada, con T (tipos genericos) , con opción descripcion simple"
	},
	"comment_class_extends_implements": {
		"prefix": "comment_class_extends_implements",
		"body": [
			"/** @info <hr>  ",
			" * *class* `$1`",
			" * ",
			" * **Descripción:**  ",
			" * $2",
			" * ____",
			" * *extends:*  ",
			" * `$3`",
			" * ",
			" * *implements*  ",
			" * `$4`",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado para clase heredada con implementacion de interfaces, con opción descripcion simple"
	},
	"comment_class_extends_implements_T": {
		"prefix": "comment_class_extends_implements_T",
		"body": [
			"/** @info <hr>  ",
			" * *class* `$1`",
			" * ",
			" * **Descripción:**  ",
			" * $2",
			" * ____",
			" * *Types:*  ",
			" * `$3`",
			" * ",
			" * *extends:*  ",
			" * `$4`",
			" * ",
			" * *implements*  ",
			" * `$5`",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado para clase heredada con implementacion de interfaces, con T (tipos genericos), con opción descripcion simple"
	},
	"comment_abstract_class_extends_implements": {
		"prefix": "comment_abstract_class_extends_implements",
		"body": [
			"/** @info <hr>  ",
			" * *abstract class* `$1`",
			" * ",
			" * **Descripción:**  ",
			" * $2",
			" * ____",
			" * *extends:*  ",
			" * `$3`",
			" * ",
			" * *implements*  ",
			" * `$4`",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado para clase abtracta heredada con implementacion de interfaces, con opción descripcion simple"
	},
	"comment_abstract_class_extends_implements_T": {
		"prefix": "comment_abstract_class_extends_implements_T",
		"body": [
			"/** @info <hr>  ",
			" * *abstract class* `$1`",
			" * ",
			" * **Descripción:**  ",
			" * $2",
			" * ____",
			" * *Types:*  ",
			" * `$3`",
			" * ",
			" * *extends:*  ",
			" * `$4`",
			" * ",
			" * *implements*  ",
			" * `$5`",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado para clase abtracta heredada con implementacion de interfaces, con T (tipos genericos), con opción descripcion simple"
	},
	"comment_interface": {
		"prefix": "comment_interface",
		"body": [
			"/** @info <hr>  ",
			" * *interface* `$1`",
			" * ",
			" * **Descripción:**  ",
			" * $2",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado de interfaz sencilla, con descripción sencilla"
	},
	"comment_interface_T": {
		"prefix": "comment_interface_T",
		"body": [
			"/** @info <hr>  ",
			" * *interface* `$1`",
			" * ",
			" * **Descripción:**  ",
			" * $2",
			" * ____",
			" * *Types:*  ",
			" * `$3`",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado de interfaz sencilla, con T (Tipado Generico), con descripción sencilla"
	},
	"comment_interface_extends": {
		"prefix": "comment_interface_extends",
		"body": [
			"/** @info <hr>  ",
			" * *interface* `$1`",
			" * ",
			" * **Descripción:**  ",
			" * $2",
			" * ____",
			" * *extends:*  ",
			" * `$3`",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado de interfaz extendida, con descripción sencilla"
	},
	"comment_interface_extends_T": {
		"prefix": "comment_interface_extends_T",
		"body": [
			"/** @info <hr>  ",
			" * *interface* `$1`",
			" * ",
			" * **Descripción:**  ",
			" * $2",
			" * ____",
			" * *extends:*  ",
			" * `$3`",
			" * ",
			" * *Types:*  ",
			" * `$4`",
			" * ____",
			" */"
		],
		"description": "Comentario de encabezado de interfaz extendida, con T (Tipado Generico), con descripción sencilla"
	},
	"comment_constructor_with_params": {
		"prefix": "comment_constructor_with_params",
		"body": [
			"/** ",
			" * ...",
			" * ____",
			" * @param $1",
			" */"
		],
		"description": "Comentario de encabezado del metodo constructor, con parametros"
	},
	"comment_method_void": {
		"prefix": "comment_method_void",
		"body": [
			"/** ",
			" * ...",
			" */"
		],
		"description": "Comentario de encabezado del metodo sin retorno"
	},
	"comment_method_return": {
		"prefix": "comment_method_return",
		"body": [
			"/** ",
			" * ...",
			" * ____",
			" * @returns $1",
			" */"
		],
		"description": "Comentario de encabezado del metodo con retorno"
	},	
	"comment_method_void_with_params": {
		"prefix": "comment_method_void_with_params",
		"body": [
			"/** ",
			" * ...",
			" * ____",
			" * @param $1",
			" */"
		],
		"description": "Comentario de encabezado del metodo sin retorno y con parametros"
	},
	"comment_method_return_with_params": {
		"prefix": "comment_method_return_with_params",
		"body": [
			"/** ",
			" * ...",
			" * ____",
			" * @param $1",
			" * ____",		
			" * @returns $2",	
			" */"
		],
		"description": "Comentario de encabezado del metodo con retorno y con parametros"
	},	
	"comment_property": {
		"prefix": "comment_property",
		"body": [
			"/** ...*/"
		],
		"description": "comentario de encabezado para un atributo o propiedad de una clase o interfaz o enum"
	},
	"comment_var": {
		"prefix": "comment_var",
		"body": [
			"/** ...*/"
		],
		"description": "comentario de encabezado para una variable global (normalmente para exportar)"
	},
	"separador_XS_style1": {
		"prefix": "bqSeparador_XS_style1",
		"body": [
			"//====${1/(.*)/${1:/upcase}/}===========================",
			""
		],
		"description": "bloque de Separador sencillo con titulo de tamaño minusculo 32 caracteres + titulo, style ==="
	},
	"separador_S_style1": {
		"prefix": "bqSeparador_S_style1",
		"body": [
			"//====${1/(.*)/${1:/upcase}/}============================================",
			""
		],
		"description": "bloque de Separador sencillo con titulo de tamaño pequeño 48 caracteres + titulo, style ==="
	},
	"separador_M_style1": {
		"prefix": "bqSeparador_M_style1",
		"body": [
			"//====${1/(.*)/${1:/upcase}/}============================================================",
			""
		],
		"description": "bloque de Separador sencillo con titulo de tamaño mediano 64 caracteres + titulo, style ==="
	},
	"separador_L_style1": {
		"prefix": "bqSeparador_L_style1",
		"body": [
			"//====${1/(.*)/${1:/upcase}/}============================================================================================================================",
			""
		],
		"description": "bloque de Separador sencillo con titulo de tamanno grande 128 caracteres + título, style ==="
	},
	"separador_XS_style2": {
		"prefix": "bqSeparador_XS_style2",
		"body": [
			"//████${1/(.*)/${1:/upcase}/}████████████████████████████",
			""
		],
		"description": "bloque de Separador sencillo con título de tamaño minusculo 32 caracteres + título, style ███"
	},
	"separador_S_style2": {
		"prefix": "bqSeparador_S_style2",
		"body": [
			"//████${1/(.*)/${1:/upcase}/}████████████████████████████████████████████",
			""
		],
		"description": "bloque de Separador sencillo con título de tamaño pequenno 48 caracteres + título, style ███"
	},
	"separador_M_style2": {
		"prefix": "bqSeparador_M_style2",
		"body": [
			"//████${1/(.*)/${1:/upcase}/}████████████████████████████████████████████████████████████",
			""
		],
		"description": "bloque de Separador sencillo con título de tamaño mediano 64 caracteres + título, style ███"
	},
	"separador_L_style2": {
		"prefix": "bqSeparador_L_style2",
		"body": [
			"//████${1/(.*)/${1:/upcase}/}████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",
			""
		],
		"description": "bloque de Separador sencillo con título de tamaño grande 128 caracteres + título, style ███"
	},
	"bqConstruccion_XS_style1": {
		"prefix": "bqConstruccion_XS_style1",
		"body": [
			"/*--------------------------------*/",
			"/*--------------------------------*/",
			"/*--------------------------------*/",
			"/*--------------------------------*/",									
			"/*--------------------------------*/",
			"/*---- <INICIO CONSTRUCCION> -----*/",
			"",
			"/*---- <FIN CONSTRUCCION> --------*/",
			"/*--------------------------------*/",
			"/*--------------------------------*/",
			"/*--------------------------------*/",
			"/*--------------------------------*/",	
			"/*--------------------------------*/"
		],
		"description": "bloque de seccion en construccion de tamanno minusculo 32 caracteres, style ----"
	},
	"bqConstruccion_S_style1": {
		"prefix": "bqConstruccion_S_style1",
		"body": [
			"/*------------------------------------------------*/",
			"/*------------------------------------------------*/",
			"/*------------------------------------------------*/",						
			"/*------------------------------------------------*/",
			"/*------------------------------------------------*/",
			"/*------------------------------------------------*/",						
			"/*------------------------------------------------*/",			
			"/*---- <INICIO CONSTRUCCION> ---------------------*/",
			"",
			"/*---- <FIN CONSTRUCCION> ------------------------*/",
			"/*------------------------------------------------*/",
			"/*------------------------------------------------*/",						
			"/*------------------------------------------------*/",
			"/*------------------------------------------------*/",
			"/*------------------------------------------------*/",						
			"/*------------------------------------------------*/",	
			"/*------------------------------------------------*/"
		],
		"description": "bloque de seccion en construccion de tamanno pequenno 48 caracteres, style ----"
	},
	"bqConstruccion_M_style1": {
		"prefix": "bqConstruccion_M_style1",
		"body": [
			"/*----------------------------------------------------------------*/",
			"/*----------------------------------------------------------------*/",
			"/*----------------------------------------------------------------*/",		
			"/*----------------------------------------------------------------*/",
			"/*----------------------------------------------------------------*/",	
			"/*----------------------------------------------------------------*/",
			"/*----------------------------------------------------------------*/",		
			"/*----------------------------------------------------------------*/",
			"/*----------------------------------------------------------------*/",								
			"/*---- <INICIO CONSTRUCCION> -------------------------------------*/",
			"",
			"/*---- <FIN CONSTRUCCION> ----------------------------------------*/",
			"/*----------------------------------------------------------------*/",
			"/*----------------------------------------------------------------*/",		
			"/*----------------------------------------------------------------*/",
			"/*----------------------------------------------------------------*/",	
			"/*----------------------------------------------------------------*/",
			"/*----------------------------------------------------------------*/",		
			"/*----------------------------------------------------------------*/",
			"/*----------------------------------------------------------------*/",	
			"/*----------------------------------------------------------------*/"
		],
		"description": "bloque de seccion en construccion de tamaño mediano 64 caracteres, style ----"
	},
	"bqConstruccion_L_style1": {
		"prefix": "bqConstruccion_L_style1",
		"body": [
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",			
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",			
			"/*---- <INICIO CONSTRUCCION> -----------------------------------------------------------------------------------------------------*/",
			"",
			"/*---- <FIN CONSTRUCCION> --------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",			
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/"
		],
		"description": "bloque de seccion en construccion de tamanno grande 128 caracteres, style ----"
	},	
	"bqConstruccionWithPreCode_XS_style1": {
		"prefix": "bqConstruccionWithPreCode_XS_style1",
		"body": [
			"/*--------------------------------*/",
			"/*--------------------------------*/",
			"/*---- <INICIO CONSTRUCCION> -----*/",
			"/*",
			"$TM_SELECTED_TEXT",
			"*/",
			"$1",
			"/*---- <FIN CONSTRUCCION> --------*/",
			"/*--------------------------------*/",
			"/*--------------------------------*/"
		],
		"description": "bloque de seccion en construccion de tamaño minusculo 32 caracteres, con codigo anterior comentado, style ----"
	},	
	"bqConstruccionWithPreCode_S_style1": {
		"prefix": "bqConstruccionWithPreCode_S_style1",
		"body": [
			"/*------------------------------------------------*/",
			"/*------------------------------------------------*/",
			"/*---- <INICIO CONSTRUCCION> ---------------------*/",
			"/*",
			"$TM_SELECTED_TEXT",
			"*/",
			"$1",
			"/*---- <FIN CONSTRUCCION> ------------------------*/",
			"/*------------------------------------------------*/",
			"/*------------------------------------------------*/"
		],
		"description": "bloque de seccion en construccion de tamaño pequeño 48 caracteres, con codigo anterior comentado, style ----"
	},		
	"bqConstruccionWithPreCode_M_style1": {
		"prefix": "bqConstruccionWithPreCode_M_style1",
		"body": [
			"/*----------------------------------------------------------------*/",
			"/*----------------------------------------------------------------*/",
			"/*---- <INICIO CONSTRUCCION> -------------------------------------*/",
			"/*",
			"$TM_SELECTED_TEXT",
			"*/",
			"$1",
			"/*---- <FIN CONSTRUCCION> ----------------------------------------*/",
			"/*----------------------------------------------------------------*/",
			"/*----------------------------------------------------------------*/"
		],
		"description": "bloque de seccion en construccion de tamaño mediano 64 caracteres, con codigo anterior comentado, style ----"
	},	
	"bqConstruccionWithPreCode_L_style1": {
		"prefix": "bqConstruccionWithPreCode_L_style1",
		"body": [
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*---- <INICIO CONSTRUCCION> -----------------------------------------------------------------------------------------------------*/",
			"/*",
			"$TM_SELECTED_TEXT",
			"*/",
			"$1",
			"/*---- <FIN CONSTRUCCION> --------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/",
			"/*--------------------------------------------------------------------------------------------------------------------------------*/"
		],
		"description": "bloque de seccion en construccion de tamaño grande 128 caracteres, con codigo anterior comentado, style ----"
	},		
	//███Utileria codigo████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
	"const_destructure_obj": {
		"prefix": "const_destructure_obj",
		"body": [
		  "const {} = $1;"
		],
		"description": "Destructuración de un objeto almacenado en una constante"
	},
	"const_destructure_Array": {
		"prefix": "const_destructure_Array",
		"body": [
		  "const [] = $1;"
		],
		"description": "Destructuración de un array almacenado en una constante"
	},	
	"function_basic": {
		"prefix": "function_basic",
		"body": [
			"/**... */",
			"function $1(): $2 {",
			"\treturn;",
			"}"
		],
		"description": "Función básica sin parámetros"
	},
	"function_param_basic": {
		"prefix": "function_param_basic",
		"body": [
			"/**... */",
			"function $1($2): $3 {",
			"\treturn;",
			"}"
		],
		"description": "Función básica con parámetros"
	},
	"arrow_fn_bq": {
		"prefix": "arrow_fn_bq",
		"body": [
			"($1) => {",
			"\treturn;",
			"}"
		],
		"description": "Arrow function con bloque de código y retorno explícito"
	},
	"arrow_fn_generic_error": {
		"prefix": "arrow_fn_generic_error",
		"body": [
			"(error)=>{ console.log(error) }"
		],
		"description": "Arrow function para manejo genérico de errores (console.log)"
	},
	"array_cast": {
		"prefix": "array_cast",
		"body": [
			"$1 = (Array.isArray($1)) ? $1 : [$1];"
		],
		"description": "Convierte una variable en array si no lo es (para variables ya declaradas)"
	},
	"if_oneline_with_return": {
		"prefix": "if_oneline_with_return",
		"body": [
			"if ($1) return $2;"
		],
		"description": "If de una línea con retorno inmediato (sin bloques)"
	},	
	"if_else_if_assignment": {
		"prefix": "if_else_if_assignment",
		"body": [
			"let $1",
			"if (${2:Condition}) $1 = ${3:value};",
			"else if(${4:Condition}) $1 = ${5:value};",
			"else $1 = ${6:value};"
		  ],
		"description": "Asignación condicional con if/else if/else (sin bloques)"
	},	
	"if_else__if_bq": {
		"prefix": "if_else__if_bq",
		"body": [
			"if ($1) {",
			"\t",
			"}else if($2){",
			"\t",
			"}else{",
			"\t",
			"}"
		  ],
		"description": "Estructura if/else if/else con bloques de código"
	},	
	"switch_bq": {
		"prefix": "switch_bq",
		"body": [
			"switch($1){",
			"  case \"$2\":{",
			"",
			"  } break;",
			"  case \"$3\":{",
			"",
			"  } break;",
			"  default:{",
			"",
			"  }break;",
			"}"
		  ],
		"description": "Estructura switch/case con bloques para cada caso"
	},		
	"if_undefined_or_null": {
		"prefix": "if_undefined_or_null",
		"body": [
			"if ($1 === undefined || $1 === null) {",
			"\t$2",
			"}"
		],
		"description": "Verifica si una variable es undefined o null"
	},
	"if_object": {
		"prefix": "if_object",
		"body": [
		  "if (typeof $1 === \"object\" && $1 !== null) {",
		  "\t$2",
		  "}"
		],
		"description": "Verifica si una variable es de tipo object (incluye arrays)"
	},	
	"if_array_empty": {
		"prefix": "if_array_empty",
		"body": [
			"if (Array.isArray($1) && $1.length === 0) {",
			"\t$2",
			"}"
		],
		"description": "Verifica si un array está vacío"
	},
	"if_array_not_empty": {
		"prefix": "if_array_not_empty",
		"body": [
			"if (Array.isArray($1) && $1.length > 0) {",
			"\t$2",
			"}"
		],
		"description": "Verifica si un array no está vacío"
	},	
	"if_object_not_Array": {
		"prefix": "if_object_not_Array",
		"body": [
		  "if (typeof $1 === \"object\" && $1 !== null && !Array.isArray($1)) {",
		  "\t$2",
		  "}"
		],
		"description": "Verifica si una variable es un objeto (excluyendo arrays)"
	},	
	"if_float_number" : {
		"prefix": "if_float_number",
		"body": [
			"const $1 = parseFloat((($2) as unknown) as string);",
			"if (typeof $1 === \"number\" && !isNaN($1)) {",
			"\t$3",
			"}"
		  ],
		"description": "Verifica si un valor puede convertirse a número flotante"
	},
	"if_float_number_cast": {
		"prefix": "if_float_number_cast",
		"body": [
		  "let $1 = (!isNaN(parseFloat((($1) as unknown) as string))) ?",
		  "\tparseFloat((($1) as unknown) as string) : $2 ;"
		],
		"description": "Convierte un valor a número flotante o asigna un valor por defecto ($2)"
	},	
	"if_object_with_properties": {
		"prefix": "if_object_with_properties",
		"body": [
			"if (typeof $1 === \"object\" && $1 !== null && Object.keys($1).length > 0) {",
			"\t$2",
			"}"
		],
		"description": "Verifica si un objeto tiene propiedades"
	},
	"if_object_with_properties_not_array": {
		"prefix": "if_object_with_properties_not_array",
		"body": [
			"if (typeof $1 === \"object\" && $1 !== null && !Array.isArray($1) && Object.keys($1).length > 0) {",
			"\t$2",
			"}"
		],
		"description": "Verifica si un objeto (no array) tiene propiedades"
	},	
	"new_promise": {
		"prefix": "new_promise",
		"body": [
			"new Promise( (resolve, reject) => {",
			"\t//return resolve();",
			"\t//return reject();",
			"});"
		],
		"description": "Crea una nueva promesa (requiere definir resolve/reject)"
	},
	"while_array_pop": {
		"prefix": "while_array_pop",
		"body": [
			"while($1.length > 0) {",
			"",
			"\t$1.pop();",
			"}"
		],
		"description": "Elimina elementos de un array (desde el último) usando while"
	},
	"promise_time_generated": {
		"prefix": "promise_time_generated",
		"body": [
		  "new Promise( resolve => setTimeout(resolve, 1000));"
		],
		"description": "Retraso asíncrono de 1 segundo usando promesas"
	},
	"await_promise_time_generated": {
		"prefix": "await_promise_time_generated",
		"body": [
		  "await new Promise( resolve => setTimeout(resolve, 1000));"
		],
		"description": "Retraso asíncrono de 1 segundo con await"
	},
	"await_promise_time_generated_with_code": {
		"prefix": "await_promise_time_generated_with_code",
		"body": [
		  "await new Promise( resolve => setTimeout(()=>{",
		  " \t//...aquí codigo a ejecutar con retraso",
		  " \treturn resolve(undefined);",
		  "}, 1000));"
		],
		"description": "Retraso asíncrono de 1 segundo con await y bloque de código personalizado"
	},	
	"ternary_assignment": {
		"prefix": "ternary_assignment",
		"body": [
		  "$1 = ($2)? $3: $4;"
		],
		"description": "Asignación condicional con operador ternario"
	},	
	"array_map_generic": {
		"prefix": "array_map_generic",
		"body": [
			"let $2 = $1.map((item, idx, arr)=> {",
			"\t//...aquí la modoficacion a cada elemento",
			"\treturn;",
			"});"
		],
		"description": "Implementación genérica de Array.map"
	},	
	//████Tipos y utilidades exclusivas typescript████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
	"cast_any_cast": {
		"prefix": "cast_any_cast",
		"body": [
			"let $1 = (($3) as unknown) as $2;"
		],
		"description": "permite hacer un cast entre un objeto a otro sin que tengan relacion directa (se usa mucho para asignar un valor a un objeto en base a otro)"
	},
	"ts_keyof_record": {
		"prefix": "ts_keyof_record",
		"body": [
			"$1: Record<keyof $1, $2>"
		],
		"description": "permite hacer un cast entre un objeto a otro sin que tengan relacion directa (se usa mucho para asignar un valor a un objeto en base a otro)"
	},
	//████Especializacion del codigo████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
	"export_index_barrel": {
		"prefix": "export_index_barrel",
		"body": [
		  "// Exportación masiva agrupada según criterio (exportación barril)",
		  "export * from \"./file1\";",
		  "export * from \"./file2\";",
		  "export * from \"./fileN\";"
		],
		"description": "lineas de exportación agrupadas en un archivo de indice (organiza exportaciones masivas)"
	},		
	"export_type": {
		"prefix": "export_type",
		"body": [
			"/**... */",
			"export type $1 = $2;"
		],
		"description": "define un tipo y lo exporta"
	},	
	"export_type_T": {
		"prefix": "export_type_T",
		"body": [
			"/**... */",
			"export type $1<$2> = $3;"
		],
		"description": "define un tipo con generico y lo exporta"
	},	
	"export_type_refactor": {
		"prefix": "export_type_refactor",
		"body": [
			"/**refactorización de ...*/",
			"export type Trf_$1 = $2<any>;"
		],
		"description": "define una refactorizacion de tipo (reemplazando el generico por `any` en el original)"
	},	
	"export_Interface": {
		"prefix": "export_Interface",
		"body": [
			"/**... */",
			"export interface $1 {",
			"\t$2",
			"}"
		],
		"description": "declara una interfaz y la exporta"
	},
	"export_Interface_Extends": {
		"prefix": "export_Interface_Extends",
		"body": [
			"/**... */",
			"export interface $1 extends $2 {",
			"\t$3",
			"}"
		],
		"description": "declara una interfaz con extension y la exporta"
	},
	"export_Interface_T": {
		"prefix": "export_Interface_T",
		"body": [
			"/**... */",
			"export interface $1<$2> {",
			"\t$3",
			"}"
		],
		"description": "declara una interfaz con T (tipado generico) y la exporta"
	},
	"export_Interface_Extends_T": {
		"prefix": "export_Interface_Extends_T",
		"body": [
			"/**... */",
			"export interface $1<$2> extends $3 {",
			"\t$4",
			"}"
		],
		"description": "declara una interfaz con extension, con T (tipado generico) y la exporta"
	},
	"export_Interface_T_Extends_T": {
		"prefix": "export_Interface_T_Extends_T",
		"body": [			
			"/**... */",
			"export interface $1<$2> extends $3<$4> {",
			"\t$5",
			"}"
		],
		"description": "declara una interfaz T (tipado generico) con extension con T (tipado generico) y la exporta"
	},	
	"export_Enum": {
		"prefix": "export_Enum",
		"body": [
			"/**... */",
			"export enum $1 {",
			"\t$2",
			"}"
		],
		"description": "declara una enumeracion y la exporta"
	},
	"export_var": {
		"prefix": "export_var",
		"body": [			
			"/**... */",
			"export var $1 = $2;",
			""
		],
		"description": "declara un variable global y la exporta"
	},
	"export_Class": {
		"prefix": "export_Class",
		"body": [			
			"/**... */",
			"export class $1 {",
			"",
            "\t/**... */",
			"\tconstructor() {$2}",
			"",
			"}"
		  ],
		"description": "declara una clase y la exporta"
	},
	"export_Class_T": {
		"prefix": "export_Class_T",
		"body": [			
			"/**... */",
			"*/",
			"export class $1<$2> {",
			"",
            "\t/**... */",
			"\tconstructor() {$3}",
			"",
			"}"
		  ],
		"description": "declara una clase con T (tipado Generico) y la exporta"
	},
	"export_Class_Extends": {
		"prefix": "export_Class_Extends",
		"body": [			
			"/**... */",
			"export class $1 extends $2 {",
			"",
            "\t/**... */",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\t$3",
			"\t}",
			"",
			"}"
		],
		"description": "declara una clase extendida o heredada y la exporta"
	},
	"export_Class_T_Extends": {
		"prefix": "export_Class_T_Extends",
		"body": [			
			"/**... */",
			"export class $1<$2> extends $3{",
			"",
            "\t/**... */",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\t$4",			
			"\t}",
			"",
			"}"
		],
		"description": "declara una clase  con T (tipado Generico), extendida o heredada y la exporta"
	},
	"export_Class_Extends_T": {
		"prefix": "export_Class_Extends_T",
		"body": [			
			"/**... */",
			"export class $1 extends $2<$3>{",
			"",
            "\t/**... */",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\t$4",
			"\t}",
			"",
			"}"
		],
		"description": "declara una clase extendida o heredada, con T (tipado Generico) y la exporta"
	},	
	"export_Class_Implements": {
		"prefix": "export_Class_Implements",
		"body": [			
			"/**... */",
			"export class $1 implements $2 {",
			"",
            "\t/**... */",
			"\tconstructor() {$3}",
			"",
			"}"
		],
		"description": "declara una clase que implementa interfaces y la exporta"
	},
	"export_Class_T_Implements": {
		"prefix": "export_Class_T_Implements",
		"body": [			
			"/**... */",
			"export class $1<$2> implements $3 {",
			"",
            "\t/**... */",
			"\tconstructor() {$4}",
			"",
			"}"
		],
		"description": "declara una clase con T (tipado Generico) que implementa interfaces y la exporta"
	},
	"export_Class_Implements_T": {
		"prefix": "export_Class_Implements_T",
		"body": [			
			"/**... */",
			"export class $1 implements $2<$3> {",
			"",
            "\t/**... */",
			"\tconstructor() {$4}",
			"",
			"}"
		],
		"description": "declara una clase que implementa interfaces con T (tipado Generico) y la exporta"
	},			
	"export_Class_Extends_Implements": {
		"prefix": "export_Class_Extends_Implements",
		"body": [			
			"/**... */",
			"export class $1 extends $2 implements $3{",
			"",
            "\t/**... */",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\t$4",
			"\t}",
			"",
			"}"
		],
		"description": "declara una clase extendida o heredada y que tambien implementa interfaces; y la exporta"
	},
	"export_Class_T_Extends_Implements": {
		"prefix": "export_Class_T_Extends_Implements",
		"body": [			
			"/**... */",
			"export class $1<$2> extends $3 implements $4{",
			"",
            "\t/**... */",
			"\tconstructor($5) {",
			"\t\tsuper();",
			"\t\t$5",
			"\t}",
			"",
			"}"
		],
		"description": "declara una clase con T (Tipado generico),la extiende o hereda y que tambien implementa interfaces y la exporta"
	},
	"export_Class_T_Extends_T_Implements": {
		"prefix": "export_Class_T_Extends_T_Implements",
		"body": [			
			"/**... */",
			"export class $1<$2> extends $3<$4> implements $5{",
			"",
            "\t/**... */",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\t$6",			
			"\t}",
			"",
			"}"
		],
		"description": "declara una clase con T (Tipado generico),la extiende o hereda con T (tipado generico) y que tambien implementa interfaces y la exporta"
	},	
	"export_Class_T_Extends_Implements_T": {
		"prefix": "export_Class_T_Extends_Implements_T",
		"body": [			
			"/**... */",
			"export class $1<$2> extends $3 implements $4<$5>{",
			"",
            "\t/**... */",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\t$6",			
			"\t}",
			"",
			"}"
		],
		"description": "declara una clase con T (Tipado generico),la extiende o hereda y que tambien implementa interfaces con T (tipado generico) y la exporta"
	},	
	"export_Class_T_Extends_T_Implements_T": {
		"prefix": "export_Class_T_Extends_T_Implements_T",
		"body": [			
			"/**... */",
			"export class $1<$2> extends $3<$4> implements $5<$6>{",
			"",
            "\t/**... */",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\t$7",			
			"\t}",
			"",
			"}"
		],
		"description": "declara una clase con T (Tipado generico),la extiende o hereda con T (tipado generico) y que tambien implementa interfaces con T (tipado generico) y la exporta"
	},		
	"export_abstract_Class": {
		"prefix": "export_abstract_Class",
		"body": [	
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1{",
			"",
            "\t/**... */",
			"\tconstructor() {$2}",
			"",
			"}"
		],
		"description": "clase abstracta para exportar"
	},	
	"export_abstract_Class_T": {
		"prefix": "export_abstract_Class_T",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1<$2>{",
			"",
            "\t/**... */",
			"\tconstructor() {$3}",
			"",
			"}"
		],
		"description": "clase abstracta con T (tipado Generico) para exportar"
	},
	"export_abstract_Class_Extends": {
		"prefix": "export_abstract_Class_Extends",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1 extends $2 {",
			"",
            "\t/**... */",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\t$3",			
			"\t}",
			"",
			"}"
		],
		"description": "clase abstracta extendida para exportar"
	},
	"export_abstract_Class_T_Extends": {
		"prefix": "export_abstract_Class_T_Extends",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1<$2> extends $3 {",
			"",
            "\t/**... */",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\t$4",			
			"\t}",
			"",
			"}"
		],
		"description": "clase abstracta con T (Tipado generico) extendida para exportar"
	},	
	"export_abstract_Class_Extends_T": {
		"prefix": "export_abstract_Class_Extends_T",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1 extends $2<$3> {",
			"",
            "\t/**... */",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\t$4",			
			"\t}",
			"",
			"}"
		],
		"description": "clase abstracta extendida, con T (Tipado generico) para exportar"
	},	
	"export_abstract_Class_Implements": {
		"prefix": "export_abstract_Class_Implements",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1 implements $2 {",
			"",
            "\t/**... */",
			"\tconstructor() {$3}",
			"",
			"}"
		],
		"description": "clase abstracta que implementa interfaces para exportar"
	},
	"export_abstract_Class_T_Implements": {
		"prefix": "export_abstract_Class_T_Implements",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1<$2> implements $3 {",
			"",
            "\t/**... */",
			"\tconstructor() {$4}",
			"",
			"}"
		],
		"description": "clase abstracta con T (Tipado generico) que implementa interfaces para exportar"
	},
	"export_abstract_Class_Implements_T": {
		"prefix": "export_abstract_Class_Implements_T",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1<$2> implements $3<$4> {",
			"",
            "\t/**... */",
			"\tconstructor($5) {}",
			"",
			"}"
		],
		"description": "clase abstracta que implementa interfaces con T (Tipado generico) para exportar"
	},	
	"export_abstract_Class_Extends_Implements": {
		"prefix": "export_abstract_Class_Extends_Implements",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1 extends $2 implements $3 {",
			"",
            "\t/**... */",
            "\tconstructor() {",
            "\t\tsuper();",
            "\t\t$4",           
            "\t}",
			"",
			"}"
		],
		"description": "clase abstracta que implementa interfaces para exportar"
	},
	"export_abstract_Class_T_Extends_Implements": {
		"prefix": "export_abstract_Class_T_Extends_Implements",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1<$2> extends $3 implements $4 {",
			"",
            "\t/**... */",
            "\tconstructor() {",
            "\t\tsuper();",
            "\t\t$5",           
            "\t}",
			"}"
		],
		"description": "clase abstracta con T (Tipado generico) que implementa interfaces para exportar"
	},
	"export_abstract_Class_T_Extends_T_Implements": {
		"prefix": "export_abstract_Class_T_Extends_T_Implements",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1<$2> extends $3<$4> implements $5 {",
			"",
            "\t/**... */",
            "\tconstructor() {",
            "\t\tsuper();",
            "\t\t$6",           
            "\t}",
			"}"
		],
		"description": "clase abstracta con T (Tipado generico), que extiende o hereda con T (Tipado generico) y que implementa interfaces para exportar"
	},	
	"export_abstract_Class_T_Extends_Implements_T": {
		"prefix": "export_abstract_Class_T_Extends_Implements_T",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1<$2> extends $3 implements $4<$5> {",
			"",
            "\t/**... */",
            "\tconstructor() {",
            "\t\tsuper();",
            "\t\t$6",           
            "\t}",
			"",
			"}"
		],
		"description": "clase abstracta con T (Tipado generico), que extiende o hereda  y que implementa interfaces con T (Tipado generico) para exportar"
	},	
	"export_abstract_Class_T_Extends_T_Implements_T": {
		"prefix": "export_abstract_Class_T_Extends_T_Implements_T",
		"body": [			
			"/** *abstract*",
			" * ",
			" * ... ",
			"*/",
			"export abstract class $1<$2> extends $3<$4> implements $5<$6> {",
			"",
            "\t/**... */",
            "\tconstructor() {",
            "\t\tsuper();",
            "\t\t$7",           
            "\t}",
			"",
			"}",
			""
		],
		"description": "clase abstracta con T (Tipado generico), que extiende o hereda con T (Tipado generico) y que implementa interfaces con T (Tipado generico) para exportar"
	},		
	"public_method": {
		"prefix": "public_method",
		"body": [
            "/**... */",
			"public $1(): $2 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo público estandar para typescript"
	},
	"public_method_Param": {
		"prefix": "public_method_Param",
		"body": [
			"/**... */",
			"public $1($2): $3 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo público estandar con parametros para typescript"
	},
	"public_static_method": {
		"prefix": "public_static_method",
		"body": [
			"/**... */",
			"public static $1(): $2 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo público y estatico estandar para typescript"
	},
	"public_static_method_Param": {
		"prefix": "public_static_method_Param",
		"body": [
			"/**... */",
			"public static $1($2): $3 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo público y estatico estandar, con parametros, para typescript"
	},
	"public_abstract_method": {
		"prefix": "public_abstract_method",
		"body": [
			"/**... */",
			"public abstract $1(): $2;"
		],
		"description": "metodo abstracto publico, Recordar que debe declarar de una clase abstracta"
	},
	"public_abstract_method_Param": {
		"prefix": "public_abstract_method_Param",
		"body": [
			"/**... */",
			"public abstract $1($2): $3;"
		],
		"description": "metodo abstracto publico, Recordar que debe declarar de una clase abstracta"
	},
	"public_override_method": {
		"prefix": "public_override_method",
		"body": [
			"public override $1():$2{",
			"\treturn;",
			"}"
		],
		"description": "Metodo público sobreescrito para typescript"
	},
	"public_override_method_param": {
		"prefix": "public_override_method_param",
		"body": [
			"public override $1($2):$3{",
			"\treturn;",
			"}"
		],
		"description": "Metodo público sobreescrito con parametros para typescript"
	},
	"public_static_override_method": {
		"prefix": "public_static_override_method",
		"body": [
			"public static override $1():$2{",
			"\treturn;",
			"}"
		],
		"description": "Metodo público y estatico sobreescrito para typescript"
	},
	"public_static_override_method_param": {
		"prefix": "public_static_override_method_param",
		"body": [
			"public static override $1($2):$3{",
			"\treturn;",
			"}"
		],
		"description": "Metodo público y estatico sobreescrito, con parametros, para typescript"
	},
	"public_async_method": {
		"prefix": "public_async_method",
		"body": [
			"\t/**... */",
			"\tpublic async $1(): Promise<$2> {",
			"\t\treturn;",
			"\t}"
		  ],
		"description": "Metodo público estandar para typescript"
	},
	"public_override_async_method": {
		"prefix": "public_override_async_method",
		"body": [
			"\tpublic override async $1(): Promise<$2> {",
			"\t\treturn;",
			"\t}"
		  ],
		"description": "Metodo público estandar para typescript"
	},	
	"public_static_async_method": {
		"prefix": "public_static_async_method",
		"body": [
			"\t/**... */",
			"\tpublic static async $1(): Promise<$2> {",
			"\t\treturn;",
			"\t}"
		  ],
		"description": "Metodo público estandar para typescript"
	},
	"public_static_override_async_method": {
		"prefix": "public_static_override_async_method",
		"body": [
			"\tpublic static override async $1(): Promise<$2> {",
			"\t\treturn;",
			"\t}"
		  ],
		"description": "Metodo público estandar para typescript"
	},	
	"private_method": {
		"prefix": "private_method",
		"body": [
			"/**... */",
			"private $1(): $2 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo privado estandar para typescript"
	},
	"private_method_Param": {
		"prefix": "private_method_Param",
		"body": [
			"/**... */",
			"private $1($2): $3 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo privado estandar con parametros para typescript"
	},
	"private_static_method": {
		"prefix": "private_static_method",
		"body": [
			"/**... */",
			"private static $1(): $2 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo privado y estatico estandar para typescript"
	},
	"private_static_method_Param": {
		"prefix": "private_static_method_Param",
		"body": [
			"/**... */",
			"private static $1($2): $3 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo privado y estatico estandar, con parametros, para typescript"
	},
	"private_async_method": {
		"prefix": "private_async_method",
		"body": [
			"\t/**... */",
			"\tprivate static async $1(): Promise<$2> {",
			"\t\treturn;",
			"\t}"
		  ],
		"description": "Metodo privado, asyncrono, estandar para typescript"
	},
	"private_static_async_method": {
		"prefix": "private_static_async_method",
		"body": [
			"\t/**... */",
			"\tprivate static async $1(): Promise<$2> {",
			"\t\treturn;",
			"\t}"
		],
		"description": "Metodo privado, estatico y asyncrono estandar para typescript"
	},	
	"protected_method": {
		"prefix": "protected_method",
		"body": [
			"/**... */",
			"protected $1(): $2 {",
			"\treturn;",
			"}"
		],
		"description": "metodo protegido, para clase padre e hijas"
	},
	"protected_method_Param": {
		"prefix": "protected_method_Param",
		"body": [
			"/**... */",
			"protected $1($2): $3 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo protegido estandar con parametros para typescript"
	},
	"protected_static_method": {
		"prefix": "protected_static_method",
		"body": [
			"/**... */",
			"protected static $1(): $2 {",
			"\treturn;",
			"}"
		],
		"description": "metodo protegido estatico, para clase padre e hijas"
	},
	"protected_static_method_Param": {
		"prefix": "protected_static_method_Param",
		"body": [
			"/**... */",
			"protected static $1($2): $3 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo protegido y estatico estandar, con parametros, para typescript"
	},
	"protected_abstract_method": {
		"prefix": "protected_abstract_method",
		"body": [
			"/**... */",
			"protected abstract $1(): $2;"
		],
		"description": "metodo protegido abstracto, para clase padre e hijas"
	},
	"protected_abstract_method_Param": {
		"prefix": "protected_abstract_method_Param",
		"body": [
			"/**... */",
			"protected abstract $1($2): $3;"
		],
		"description": "metodo abstracto protegido, Recordar que debe declarar de una clase abstracta"
	},
	"protected_override_method": {
		"prefix": "protected_override_method",
		"body": [
			"protected override $1(): $2 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo protegido sobreescrito para typescript"
	},
	"protected_override_method_param": {
		"prefix": "protected_override_method_param",
		"body": [
			"protected override $1($2): $3 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo protegido sobreescrito con parametros para typescript"
	},
	"protected_static_override_method": {
		"prefix": "protected_static_override_method",
		"body": [
			"protected static override $1(): $2 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo protegido y estatico sobreescrito para typescript"
	},
	"protected_static_override_method_param": {
		"prefix": "protected_static_override_method_param",
		"body": [
			"protected static override $1($2): $3 {",
			"\treturn;",
			"}"
		],
		"description": "Metodo protegido y estatico sobreescrito, con parametros, para typescript"
	},
	"protected_async_method": {
		"prefix": "protected_async_method",
		"body": [
			"\t/**... */",
			"\tprotected async $1(): Promise<$2> {",
			"\t\treturn;",
			"\t}"
		],
		"description": "metodo protegido, asincrono, para clase padre e hijas"
	},	
	"protected_override_async_method": {
		"prefix": "protected_override_async_method",
		"body": [
			"\tprotected override async $1(): Promise<$2> {",
			"\t\treturn;",
			"\t}"
		],
		"description": "Metodo protegido, asincrono, sobreescrito para typescript"
	},	
	"protected_static_async_method": {
		"prefix": "protected_async_method",
		"body": [
			"\t/**... */",
			"\tprotected static async $1(): Promise<$2> {",
			"\t\treturn;",
			"\t}"
		],
		"description": "metodo estatico protegido, asincrono, para clase padre e hijas"
	},	
	"protected_static_override_async_method": {
		"prefix": "protected_override_async_method",
		"body": [
			"\tprotected static override async $1(): Promise<$2> {",
			"\t\treturn;",
			"\t}"
		],
		"description": "Metodo estatico protegido, asincrono, sobreescrito para typescript"
	},	
	"public_property": {
		"prefix": "public_property",
		"body": [
			"/**... */",
			"public $1: $2;"
		],
		"description": "Propiedad o atributo público de una clase"
	},
	"public_static_property": {
		"prefix": "public_static_property",
		"body": [
			"/**... */",
			"public static $1: $2;"
		],
		"description": "Propiedad o atributo público y estatico de una clase"
	},
	"public_abstract_property": {
		"prefix": "public_abstract_property",
		"body": [
			"/**... */",
			"public abstract $1: $2;"
		],
		"description": "Propiedad o atributo público y estatico de una clase"
	},
	"public_override_property": {
		"prefix": "public_override_property",
		"body": [
			"public override $1: $2;"
		],
		"description": "Propiedad o atributo público y sobreescrito de una clase"
	},
	"public_static_override_property": {
		"prefix": "public_static_override_property",
		"body": [
			"public static override $1: $2;"
		],
		"description": "Propiedad o atributo público y sobreescrito y estatico de una clase"
	},
	"public_get_virtual": {
		"prefix": "public_get_virtual",
		"body": [
			"/**... */",
			"public get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}"
		],
		"description": "propiedad get virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"public_set_virtual": {
		"prefix": "public_set_virtual",
		"body": [
			"/**... */",
			"public set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"public_set_and_get_virtual": {
		"prefix": "public_set_and_get_virtual",
		"body": [
			"/**... */",
			"public get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}",
			"/**... */",
			"public set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad get y set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"public_override_get_virtual": {
		"prefix": "public_override_get_virtual",
		"body": [
			"public override get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}"
		],
		"description": "propiedad sobreescrita get virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"public_override_set_virtual": {
		"prefix": "public_override_set_virtual",
		"body": [
			"public override set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad sobreescrita set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"public_override_set_and_get_virtual": {
		"prefix": "public_override_set_and_get_virtual",
		"body": [
			"public override get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}",
			"public override set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad sobreescrita get y set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"public_abstract_get_virtual": {
		"prefix": "public_abstract_get_virtual",
		"body": [
			"/**... */",
			"public abstract get $1(): ${2:Type};"
		],
		"description": "propiedad abstracta get virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"public_abstract_set_virtual": {
		"prefix": "public_abstract_set_virtual",
		"body": [
			"/**... */",
			"public abstract set $1(): ${2:Type};"
		  ],
		"description": "propiedad abstracta set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"public_abstract_set_and_get_virtual": {
		"prefix": "public_abstract_set_and_get_virtual",
		"body": [
			"/**... */",
			"public abstract get $1(): ${2:Type};",
			"/**... */",
			"public abstract set $1(): ${2:Type};"
		  ],
		"description": "propiedad abstracta get y set virtual (puede o no apuntar a una propiedad real de la clase)"
	},		
	"public_static_get_virtual": {
		"prefix": "public_static_get_virtual",
		"body": [
			"/**... */",
			"public static get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}"
		],
		"description": "propiedad get virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"public_static_set_virtual": {
		"prefix": "public_static_set_virtual",
		"body": [
			"/**... */",
			"public static set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"public_static_set_and_get_virtual": {
		"prefix": "public_static_set_and_get_virtual",
		"body": [
			"/**... */",
			"public static get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}",
			"/**... */",
			"public static set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad get y set virtual (puede o no apuntar a una propiedad real de la clase)"
	},
	"private_property": {
		"prefix": "private_property",
		"body": [
			"/**... */",
			"private $1: $2;"
		],
		"description": "Propiedad o atributo privado de una clase"
	},
	"private_static_property": {
		"prefix": "private_static_property",
		"body": [
			"/**... */",
			"private static $1: $2;"
		],
		"description": "Propiedad o atributo privado y estatico de una clase"
	},
	"private_get_virtual": {
		"prefix": "private_get_virtual",
		"body": [
			"/**... */",
			"private get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}"
		],
		"description": "propiedad get virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"private_set_virtual": {
		"prefix": "private_set_virtual",
		"body": [
			"/**... */",
			"private set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad set virtual (puede o no apuntar a una propiedad real de la clase)"
	},
	"private_set_and_get_virtual": {
		"prefix": "private_set_and_get_virtual",
		"body": [
			"/**... */",
			"private get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}",
			"/**... */",
			"private set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad get y set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"private_static_get_virtual": {
		"prefix": "private_static_get_virtual",
		"body": [
			"/**... */",
			"private static get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}"
		],
		"description": "propiedad get virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"private_static_set_virtual": {
		"prefix": "private_static_set_virtual",
		"body": [
			"/**... */",
			"private static set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad set virtual (puede o no apuntar a una propiedad real de la clase)"
	},
	"private_static_set_and_get_virtual": {
		"prefix": "private_static_set_and_get_virtual",
		"body": [
			"/**... */",
			"private static get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}",
			"/**... */",
			"private static set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad get y set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"protected_property": {
		"prefix": "protected_property",
		"body": [
			"/**... */",
			"protected $1: $2;"
		],
		"description": "Propiedad o atributo protegido de una clase"
	},
	"protected_abstract_property": {
		"prefix": "protected_abstract_property",
		"body": [
			"/**... */",
			"protected abstract $1: $2;"
		],
		"description": "Propiedad o atributo protegido y estatico de una clase"
	},
	"protected_override_property": {
		"prefix": "protected_override_property",
		"body": [
			"protected override $1: $2;"
		],
		"description": "Propiedad o atributo protegido y sobreescrito de una clase"
	},	
	"protected_get_virtual": {
		"prefix": "protected_get_virtual",
		"body": [
			"/**... */",
			"protected get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}"
		],
		"description": "propiedad get virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"protected_set_virtual": {
		"prefix": "protected_set_virtual",
		"body": [
			"/**... */",
			"protected set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"protected_set_and_get_virtual": {
		"prefix": "protected_set_and_get_virtual",
		"body": [
			"/**... */",
			"protected get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}",
			"/**... */",
			"protected set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad get y set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"protected_override_get_virtual": {
		"prefix": "protected_override_get_virtual",
		"body": [
			"protected override get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}"
		],
		"description": "propiedad sobreescrita get virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"protected_override_set_virtual": {
		"prefix": "protected_override_set_virtual",
		"body": [
			"protected override set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad sobreescrita set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"protected_override_set_and_get_virtual": {
		"prefix": "protected_override_set_and_get_virtual",
		"body": [
			"protected override get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}",
			"protected override set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad sobreescrita get y set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"protected_abstract_get_virtual": {
		"prefix": "protected_abstract_get_virtual",
		"body": [
			"/**... */",
			"protected abstract get $1(): ${2:Type};"
		],
		"description": "propiedad abstracta get virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"protected_abstract_set_virtual": {
		"prefix": "protected_abstract_set_virtual",
		"body": [
			"/**... */",
			"protected abstract set $1(): ${2:Type};"
		  ],
		"description": "propiedad abstracta set virtual (puede o no apuntar a una propiedad real de la clase)"
	},		
	"protected_abstract_set_and_get_virtual": {
		"prefix": "protected_abstract_set_and_get_virtual",
		"body": [
			"/**... */",
			"protected abstract get $1(): ${2:Type};",
			"/**... */",
			"protected abstract set $1(): ${2:Type};"
		  ],
		"description": "propiedad abstracta get y set virtual (puede o no apuntar a una propiedad real de la clase)"
	},		
	"protected_static_get_virtual": {
		"prefix": "protected_static_get_virtual",
		"body": [
			"/**... */",
			"protected static get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}"
		],
		"description": "propiedad get virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"protected_static_set_virtual": {
		"prefix": "protected_static_set_virtual",
		"body": [
			"/**... */",
			"protected static set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	"protected_static_set_and_get_virtual": {
		"prefix": "protected_static_set_and_get_virtual",
		"body": [
			"/**... */",
			"protected static get $1(): ${3:Type} {",
			"\tlet p = this.$2;",
			"\treturn p;",
			"}",
			"/**... */",
			"protected static set $1(v: ${3:Type}) {",
			"\tthis.$2 = v;",
			"\treturn;",
			"}"
		  ],
		"description": "propiedad get y set virtual (puede o no apuntar a una propiedad real de la clase)"
	},	
	//████Especializacion Patrones POO████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████  
	"export_Class_singleton": {
		"prefix": "export_Class_singleton",
		"body": [			
			"/** *Singleton*",
			" * ",
			" * ... ",
			"*/",
			"export class $1 {",
			"\t/**  Almacena la instancia única de esta clase */",
			"\tprivate static $1_instance: $1;",
			"\t/**... */",
			"\tprotected constructor() {}",
			"\t/** @returns la instancia única de la clase*/",
			"\tpublic static getInstance():$1{",
			"\t\t$1.$1_instance = (typeof $1.$1_instance === 'object' && $1.$1_instance !== null) ?",
			"\t\t\t$1.$1_instance : new $1();",
			"\t\treturn $1.$1_instance;",
			"\t}",
			"}"
		],
		"description": "Clase de Patron Singleton sencilla"
	},
	"export_Class_singleton_extends": {
		"prefix": "export_Class_singleton_extends",
		"body": [
			"/** *Singleton*",
			" * ",
			" * ... ",
			"*/",
			"export class $1 extends $2{",
			"",
			"\t/**  Almacena la instancia única de esta clase */",
			"\tprivate static $1_instance: $1;",
			"\t/** ",
			"\t * descrip...",
			"\t * ",
			"\t*/",
			"\tprotected constructor() {",
			"\t\tsuper();",
			"\t}",
			"\t/** @returns la instancia única de la clase*/",
			"\tpublic static getInstance():$1{",
			"\t\t$1.$1_instance = (typeof $1.$1_instance === 'object' && $1.$1_instance !== null) ?",
			"\t\t\t$1.$1_instance : new $1();",
			"\t\treturn $1.$1_instance;",
			"\t}",
			"}"
		],
		"description": "Clase singleton extendida sencilla"
	},	
	"export_function_factory": {
		"prefix": "export_function_factory",
		"body": [
			"/**... */",
			"export function ${1:NameFnFactory}(keyInstance:$2): ${3:InterfaceBase} {",
			"\tlet instance: ${3:InterfaceBase};",
			"\tif ($4) instance = new ${5:Class}();",
			"\telse if($6) instance = new ${7:Class}();",
			"\telse throw new Error(`${keyInstance} does no valid key for factory`);",
			"\treturn instance;",
			"}"
		],
		"description": "factoria en funcion basica y exportable"
	},
	"export_Class_cursor": {
		"prefix": "export_Class_cursor",
		"body": [
			"/**... */",
			"export class ${1:ClassCursor} {",
			"\t/**@returns valor predefinidos de `${2:Object}`*/",
			"\tprivate static getDefault = () => {",
			"\t\treturn {",
			"\t\t\t//...aquí las propiedades de `${2:Object}`",
			"\t\t};",
			"\t};",
			"\t/**`${2:Object}` actual*/",
			"\tprivate _${2:Object}: ReturnType<(typeof ${1:ClassCursor})[\"getDefault\"]>;",
			"\t/**estado del cursor */",
			"\tprivate status: \"no_init\" | \"started\" | \"done\" = \"no_init\";",
			"\t/**",
			"\t * @param pCursor propiedades opcionales para",
			"\t * personalizar la inicializacion del cursor",
			"\t */",
			"\tconstructor(p_${2:Object}?: Partial<${1:ClassCursor}[\"_${2:Object}\"]>) {",
			"\t\tif (typeof this._${2:Object} !== \"object\") this._${2:Object} = this.getDefault(); //⚠No llamar la estatica⚠",
			"\t\tthis._${2:Object} = {",
			"\t\t\t...this._${2:Object},",
			"\t\t\t...(p_${2:Object} ?? {}),",
			"\t\t};",
			"\t}",
			"\t/**@returns valor predefinidos del cursor*/",
			"\tprivate getDefault() {",
			"\t\treturn ${1:ClassCursor}.getDefault();",
			"\t}",
			"\t/**@returns el estado del cursor */",
			"\tpublic getStatus(): ${1:ClassCursor}[\"status\"] {",
			"\t\treturn this.status;",
			"\t}",
			"\t/**inicializar el cursor */",
			"\tpublic start(): this {",
			"\t\tthis.status = \"started\";",
			"\t\treturn this;",
			"\t}",
			"\t/**@returns una instantanea del `${2:Object}`*/",
			"\tpublic getSnapShot(): ${1:ClassCursor}[\"_${2:Object}\"] {",
			"\t\tconst sS = { ...this._${2:Object} }; //⚠Clonacion sencilla⚠",
			"\t\treturn sS;",
			"\t}",
			"\t/**@returns el `${2:Object}` y cierra el cursor*/",
			"\tpublic done(): ${1:ClassCursor}[\"_${2:Object}\"] {",
			"\t\tconst o = { ...this._${2:Object}}; //⚠Clonacion sencilla⚠",
			"\t\tthis.status = \"done\";",
			"\t\treturn o;",
			"\t}",
			"}"
		],
		"description": "clase base para cusrores (tambien conocida como patrón Builder)"
	},	
	"export_selfconstructor_Class": {
	"prefix": "export_selfconstructor_Class",
	"body": [
		"/** *selfconstructor*",
		" *",
		" * ...",
		" */",
		"export class $1 implements ReturnType<$1[\"getDefault\"]> {",
		"\t/**@returns todos los campos con sus valores predefinidos para instancias de esta clase*/",
		"\tpublic static readonly getDefault = () => {",
		"\t\treturn {",
		"\t\t\t//...aquí las propiedades",
		"\t\t\t// exampleField: \"hello\", //tipo string deducido",
		"\t\t};",
		"\t};",
		"\t/**@returns todas las constantes a usar en instancias de esta clase*/",
		"\tprotected static readonly getCONSTANTS = () => {",
		"\t\treturn {",
		"\t\t\t//..aquí las constantes",
		"\t\t};",
		"\t};",
		"\t// private _exampleField: string;",
		"\t// public get exampleField(): string {",
		"\t//   return this._exampleField;",
		"\t// }",
		"\t// protected set exampleField(v: unknown) {",
		"\t//   this._exampleField=",
		"\t//     typeof v === \"string\"",
		"\t//       ? v",
		"\t//       : this._exampleField !== undefined",
		"\t//       ? this._exampleField",
		"\t//       : this.getDefault().exampleField;",
		"\t// }",
		"\t/**",
		"\t * @param base objeto literal con valores personalizados para inicalizar las propiedades",
		"\t * @param isInit `= true` ❕Solo para herencia❕, indica si esta clase debe iniciar las propiedaes",
		"\t */",
		"\tconstructor(base: Partial<ReturnType<$1[\"getDefault\"]>> = {}, isInit = true) {",
		"\t\tif (isInit) this.initProps(base);",
		"\t}",
		"\t/**@returns todos los campos con sus valores predefinidos*/",
		"\tprotected getDefault() {",
		"\t\treturn $1.getDefault();",
		"\t}",
		"\t/**@returns todas las constantes de la clase para las instancias*/",
		"\tprotected getCONST() {",
		"\t\treturn $1.getCONSTANTS();",
		"\t}",		
		"\t/**inicializa las propiedades de manera dinamica",
		"\t *",
		"\t * @param base objeto literal con valores personalizados para inicalizar las propiedades",
		"\t */",
		"\tprotected initProps(base: Partial<ReturnType<$1[\"getDefault\"]>>): void {",
		"\t\tbase = typeof base === \"object\" && base !== null ? base : {};",
		"\t\tfor (const key in this.getDefault()) {",
		"\t\t\tthis[key] = base[key];",
		"\t\t}",
		"\t\treturn;",
		"\t}",
		"\t/**⚠ Reinicia todas las propiedades al valor predefinido ⚠ */",
		"\tpublic resetProps(): void {",
		"\t\tconst df = this.getDefault();",
		"\t\tfor (const key in df) {",
		"\t\t\tthis[key] = df[key];",
		"\t\t}",
		"\t\treturn;",
		"\t}",
		"\t/**reinicia una propiedad al valor predefinido",
		"\t *",
		"\t * @param key clave identificadora de la propiedad a reiniciar",
		"\t */",
		"\tpublic resetPropByKey(key: keyof ReturnType<$1[\"getDefault\"]>): void {",
		"\t\tconst df = this.getDefault();",
		"\t\tthis[key] = df[key];",
		"\t\treturn;",
		"\t}",
		"\t/**muta masivamente propiedades de manera dinamica",
		"\t *",
		"\t * @param base objeto literal con valores personalizados a mutar en las propiedades",
		"\t */",		
		"\tpublic mutateProps(base: Partial<ReturnType<$1[\"getDefault\"]>>): void {",
		"\t\tbase = typeof base === \"object\" && base !== null ? base : {} as any;",
		"\t\tfor (const key in base) {",
		"\t\t\tthis[key] = base[key];",
		"\t\t}",
		"\t\treturn;",
		"\t}",		
		"\t/**@returns un objeto literal con las propiedades base */",
		"\tpublic getLiteral(): ReturnType<$1[\"getDefault\"]>  {",
		"\t\tlet literal = {}",
		"\t\tfor (const key in this.getDefault()) {",
		"\t\t\tliteral[key] = this[key];",
		"\t\t}",
		"\t\treturn literal as any;",
		"\t}",
		"}"
	],
	"description": "clase con autoconstructor que a partir de propiedades predefinidas permite 3 opciones de personalización para sus propiedades"
	},
	"export_selfconstructor_abstract_Class": {
		"prefix": "export_selfconstructor_abstract_Class",
		"body": [
			"/** *selfconstructor*",
			" *",
			" * ...",
			" */",
			"export abstract class $1 implements ReturnType<$1[\"getDefault\"]> {",
			"\t/**@returns todos los campos con sus valores predefinidos para instancias de esta clase*/",
			"\tpublic static readonly getDefault = () => {",
			"\t\treturn {",
			"\t\t\t//...aquí las propiedades",
			"\t\t\t// exampleField: \"hello\", //tipo string deducido",
			"\t\t};",
			"\t};",
			"\t/**@returns todas las constantes a usar en instancias de esta clase*/",
			"\tprotected static readonly getCONSTANTS = () => {",
			"\t\treturn {",
			"\t\t\t//..aquí las constantes",
			"\t\t};",
			"\t};",
			"\t// private _exampleField: string;",
			"\t// public get exampleField(): string {",
			"\t//   return this._exampleField;",
			"\t// }",
			"\t// protected set exampleField(v: unknown) {",
			"\t//   this._exampleField=",
			"\t//     typeof v === \"string\"",
			"\t//       ? v",
			"\t//       : this._exampleField !== undefined",
			"\t//       ? this._exampleField",
			"\t//       : this.getDefault().exampleField;",
			"\t// }",
			"\t/**",
			"\t * @param base objeto literal con valores personalizados para inicalizar las propiedades",
			"\t * @param isInit `= true` ❕Solo para herencia❕, indica si esta clase debe iniciar las propiedaes",
			"\t */",
			"\tconstructor(base: Partial<ReturnType<$1[\"getDefault\"]>> = {}, isInit = true) {",
			"\t\tif (isInit) this.initProps(base);",
			"\t}",
			"\t/**@returns todos los campos con sus valores predefinidos*/",
			"\tprotected getDefault() {",
			"\t\treturn $1.getDefault();",
			"\t}",
			"\t/**@returns todas las constantes de la clase para las instancias*/",
			"\tprotected getCONST() {",
			"\t\treturn $1.getCONSTANTS();",
			"\t}",				
			"\t/**inicializa las propiedades de manera dinamica",
			"\t *",
			"\t * @param base objeto literal con valores personalizados para inicalizar las propiedades",
			"\t */",
			"\tprotected initProps(base: Partial<ReturnType<$1[\"getDefault\"]>>): void {",
			"\t\tbase = typeof base === \"object\" && base !== null ? base : {};",			
			"\t\tfor (const key in this.getDefault()) {",
			"\t\t\tthis[key] = base[key];",
			"\t\t}",
			"\t\treturn;",
			"\t}",
			"\t/**⚠ Reinicia todas las propiedades al valor predefinido ⚠ */",
			"\tpublic resetProps(): void {",
			"\t\tconst df = this.getDefault();",
			"\t\tfor (const key in df) {",
			"\t\t\tthis[key] = df[key];",
			"\t\t}",
			"\t\treturn;",
			"\t}",
			"\t/**reinicia una propiedad al valor predefinido",
			"\t *",
			"\t * @param key clave identificadora de la propiedad a reiniciar",
			"\t */",
			"\tpublic resetPropByKey(key: keyof ReturnType<$1[\"getDefault\"]>): void {",
			"\t\tconst df = this.getDefault();",
			"\t\tthis[key] = df[key];",
			"\t\treturn;",
			"\t}",
			"\t/**muta masivamente propiedades de manera dinamica",
			"\t *",
			"\t * @param base objeto literal con valores personalizados a mutar en las propiedades",
			"\t */",		
			"\tpublic mutateProps(base: Partial<ReturnType<$1[\"getDefault\"]>>): void {",
			"\t\tbase = typeof base === \"object\" && base !== null ? base : {} as any;",
			"\t\tfor (const key in base) {",
			"\t\t\tthis[key] = base[key];",
			"\t\t}",
			"\t\treturn;",
			"\t}",			
			"\t/**@returns un objeto literal con las propiedades base */",
			"\tpublic getLiteral(): ReturnType<$1[\"getDefault\"]>  {",
			"\t\tlet literal = {}",
			"\t\tfor (const key in this.getDefault()) {",
			"\t\t\tliteral[key] = this[key];",
			"\t\t}",
			"\t\treturn literal as any;",
			"\t}",
			"}"
		],
		"description": "clase abstracta con autoconstructor que a partir de propiedades predefinidas permite 3 opciones de personalización para sus propiedades"
	},	
	"export_selfconstructor_Class_extends": {
	"prefix": "export_selfconstructor_Class_extends",
	"body": [
		"/** *selfcontructor*",
		" *",
		" * ...",
		" */",
		"export class $1 extends $2 implements ReturnType<$1[\"getDefault\"]> {",
		"\tpublic static override readonly getDefault = () => {",
		"\t\tconst superDf = $2.getDefault();",
		"\t\treturn {",
		"\t\t\t...superDf,",
		"\t\t\t//...aquí las propiedades",
		"\t\t\t// exampleField: \"hello\", //tipo string deducido",
		"\t\t};",
		"\t};",
		"\tprotected static override readonly getCONSTANTS = () => {",
		"\t\tconst superCONST = $2.getCONSTANTS();",
		"\t\treturn {",
		"\t\t\t...superCONST,",
		"\t\t\t//..aquí las constantes",
		"\t\t};",
		"\t};",
		"\t// private _exampleField: string;",
		"\t// public get exampleField(): string {",
		"\t//   return this._exampleField;",
		"\t// }",
		"\t// protected set exampleField(v: unknown) {",
		"\t//   this._exampleField=",
		"\t//     typeof v === \"string\"",
		"\t//       ? v",
		"\t//       : this._exampleField !== undefined",
		"\t//       ? this._exampleField",
		"\t//       : this.getDefault().exampleField;",
		"\t// }",
		"\t/**",
		"\t * @param base objeto literal con valores personalizados para inicalizar las propiedades",
		"\t * @param isInit `= true` ❕Solo para herencia❕, indica si esta clase debe iniciar las propiedaes",
		"\t */",
		"\tconstructor(base: Partial<ReturnType<$1[\"getDefault\"]>> = {}, isInit = true) {",
		"\t\tsuper(base, false);",
		"\t\tif (isInit) this.initProps(base);",
		"\t}",
		"\tprotected override getDefault() {",
		"\t\treturn $1.getDefault();",
		"\t}",
		"\tprotected override getCONST() {",
		"\t\treturn $1.getCONSTANTS();",
		"\t}",			
		"\t",
		"\t//❗normalmente definidas en el padre, salvo que se quieran sobreescribir❗",
		"\t// /**inicializa las propiedades de manera dinamica",
		"\t//  *",
		"\t//  * @param base objeto literal con valores personalizados para inicalizar las propiedades",
		"\t//  */",
		"\t// protected override initProps(base: Partial<ReturnType<$1[\"getDefault\"]>>): void {",
		"\t//   for (const key in this.getDefault()) {",
		"\t//     this[key] = base[key];",
		"\t//   }",
		"\t//   return;",
		"\t// }",
		"\t// /**reinicia una propiedad al valor predefinido",
		"\t//  *",
		"\t//  * @param key clave identificadora de la propiedad a reiniciar",
		"\t//  */",
		"\t// public override resetPropByKey(key: keyof ReturnType<$1[\"getDefault\"]>): void {",
		"\t//   const df = this.getDefault();",
		"\t//   this[key] = df[key];",
		"\t//   return;",
		"\t// }",
		"\tpublic override mutateProps(base: Partial<ReturnType<$1[\"getDefault\"]>>): void {",
		"\t\tsuper.mutateProps(base)",
		"\t\treturn;",
		"\t}",		
		"\tpublic override getLiteral(): ReturnType<$1[\"getDefault\"]>  {",
		"\t\treturn super.getLiteral() as any;",
		"\t}",
		"}",
		""
	],
	"description": "clase hija con autoconstructor que a partir de propiedades predefinidas permite 3 opciones de personalización para sus propiedades"
	},
	"export_selfconstructor_abstract_Class_extends": {
		"prefix": "export_selfconstructor_abstract_Class_extends",
		"body": [
			"/** *selfcontructor*",
			" *",
			" * ...",
			" */",
			"export abstract class $1 extends $2 implements ReturnType<$1[\"getDefault\"]> {",
			"\tpublic static override readonly getDefault = () => {",
			"\t\tconst superDf = $2.getDefault();",
			"\t\treturn {",
			"\t\t\t...superDf,",
			"\t\t\t//...aquí las propiedades",
			"\t\t\t// exampleField: \"hello\", //tipo string deducido",
			"\t\t};",
			"\t};",
			"\tprotected static override readonly getCONSTANTS = () => {",
			"\t\tconst superCONST = $2.getCONSTANTS();",
			"\t\treturn {",
			"\t\t\t...superCONST,",
			"\t\t\t//..aquí las constantes",
			"\t\t};",
			"\t};",
			"\t// private _exampleField: string;",
			"\t// public get exampleField(): string {",
			"\t//   return this._exampleField;",
			"\t// }",
			"\t// protected set exampleField(v: unknown) {",
			"\t//   this._exampleField=",
			"\t//     typeof v === \"string\"",
			"\t//       ? v",
			"\t//       : this._exampleField !== undefined",
			"\t//       ? this._exampleField",
			"\t//       : this.getDefault().exampleField;",
			"\t// }",
			"\t/**",
			"\t * @param base objeto literal con valores personalizados para inicalizar las propiedades",
			"\t * @param isInit `= true` ❕Solo para herencia❕, indica si esta clase debe iniciar las propiedaes",
			"\t */",
			"\tconstructor(base: Partial<ReturnType<$1[\"getDefault\"]>> = {}, isInit = true) {",
			"\t\tsuper(base, false);",
			"\t\tif (isInit) this.initProps(base);",
			"\t}",
			"\tprotected override getDefault() {",
			"\t\treturn $1.getDefault();",
			"\t}",
			"\tprotected override getCONST() {",
			"\t\treturn $1.getCONSTANTS();",
			"\t}",				
			"\t",
			"\t//❗normalmente definidas en el padre, salvo que se quieran sobreescribir❗",
			"\t// /**inicializa las propiedades de manera dinamica",
			"\t//  *",
			"\t//  * @param base objeto literal con valores personalizados para inicalizar las propiedades",
			"\t//  */",
			"\t// protected override initProps(base: Partial<ReturnType<$1[\"getDefault\"]>>): void {",
			"\t//   for (const key in this.getDefault()) {",
			"\t//     this[key] = base[key];",
			"\t//   }",
			"\t//   return;",
			"\t// }",
			"\t// /**reinicia una propiedad al valor predefinido",
			"\t//  *",
			"\t//  * @param key clave identificadora de la propiedad a reiniciar",
			"\t//  */",
			"\t// public override resetPropByKey(key: keyof ReturnType<$1[\"getDefault\"]>): void {",
			"\t//   const df = this.getDefault();",
			"\t//   this[key] = df[key];",
			"\t//   return;",
			"\t// }",
			"\tpublic override mutateProps(base: Partial<ReturnType<$1[\"getDefault\"]>>): void {",
			"\t\tsuper.mutateProps(base)",
			"\t\treturn;",
			"\t}",				
			"\tpublic override getLiteral(): ReturnType<$1[\"getDefault\"]>  {",
			"\t\treturn super.getLiteral() as any;",
			"\t}",
			"}",
			""
		],
		"description": "clase hija abstracta con autoconstructor que a partir de propiedades predefinidas permite 3 opciones de personalización para sus propiedades"
	}	
}