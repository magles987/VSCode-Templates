{
	// Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	//████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
	// Genericos:
  "vue-component-setup-ts": {
    "prefix": "vue-component-setup-ts",
    "body": [
      "<script setup lang=\"ts\">",
      "import { ref, Ref, provide, reactive, watch, watchEffect, computed, onMounted, onUpdated, onUnmounted} from 'vue';",
      "//================================================================================================================================",
      "export interface I$1 {",
      "    /**empaquetador general*/",
      "    lot:{",
      "",
      "    };",
      "}",
      "//================================================================================================================================",
      "//configuracion inicial",
      "const keyComponent = \"inputBasic\";",
      "",
      "//================================================================================================================================",
      "/**contenedor de props del padre */",
      "const props = defineProps<I$1>();",
      "/**atributos iniciales NO reactivos */",
      "const diccDefault = {",
      "    //..aqui los atributos",
      "};",
      "/**contiene el diccionario de stores*/",
      "const diccStore ={",
      "    //...aqui cada key corresponde a un store()",
      "};",
      "/**diccionario de atributos reactivos*/",
      "const diccReactive = reactive({",
      "    //...aqui los atributos reactivos",
      "});",
      "/**diccionario de atributos computados del componente */",
      "const diccComputed = reactive({",
      "    //...aqui las propiedades computadas",
      "    //cp : computed(()=>diccReactive.AnyAttr), ",
      "});",
      "/**diccionario con las inicializaciones de cada props ",
      " * perteneciente a cada hijo de este componente */",
      "const diccChildProps = {",
      "    //...aqui los atributos reactivos que serán props a los hijos",
      "    //childProps:reactive<IChildProps>({}),",
      "};",
      "/**Definicion de diccionario de elementos html referenciados ",
      " * (sera inicializado en el hook monMounted) */",
      "let diccHtml_el:{",
      "    //...aqui la definicion de elementos referenciados al html del componente",
      "    //element : Ref<'keyElement'>, ",
      "};",
      "//================================================================================================================================",
      "//funciones",
      "//================================================================================================================================",
      "/** define las funciones emisoras de eventos */",
      "const emit = defineEmits<{   ",
      "    //..aqui los eventos defincion",
      "    //(e: 'NombreEvento', value: any)",
      "}>();",
      "//================================================================",
      "//declaracion de hooks para cada emisor de eventos, ",
      "//permite crea logica previa y posterior al evento ",
      "//function nombreFN_EHook($event:Event | any) {",
      "//     const value = $event.target.value;",
      "//     //...antes del evento",
      "//     emit('nombreEvento', value);",
      "//     //...despues del evento",
      "// }",
      "//================================================================================================================================",
      "//Hooks del componente",
      "onMounted(()=>{",
      "    diccHtml_el = {};",
      "});",
      "onUpdated(()=>{",
      "",
      "});",
      "onUnmounted(()=>{",
      "",
      "});",
      "//================================================================================================================================",
      "",
      "</script>",
      "",
      "<template>",
      "",
      "</template>",
      "",
      "<style scoped lang=\"scss\">",
      "",
      "</style>"
    ],
    "description": "crea un esqueleto de un componente vacio con formato API setup Composition"
  },
}